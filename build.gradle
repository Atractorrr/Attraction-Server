plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.12"
}

group = 'run'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

test {
    finalizedBy jacocoTestReport // 테스트 종료후 항상 리포트 생성
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required.set(true)
        html.required.set(true)

        // QueryDSL Q클래스 제외
        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                '**/*Application*',
                                '**/*Exception*',
                                '**/dto/**',
                        ] + Qdomains)
            }))
        }

        xml.destination file("${layout.buildDirectory.get()}/jacoco/index.xml")
        html.destination file("${layout.buildDirectory.get()}/jacoco/index.html")
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        //logback과의 충돌 방지
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //Gson
    implementation 'com.google.code.gson:gson:2.8.7'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //Querydsl
    implementation 'com.querydsl:querydsl-core:5.1.0'
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //DB
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.2'

    //gmail
    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev20220404-2.0.0'

    //kafka
    implementation 'org.springframework.kafka:spring-kafka:3.2.0'

    // 프로메테우스
    implementation 'io.micrometer:micrometer-registry-prometheus'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    //test
    testRuntimeOnly 'com.h2database:h2'

    //swagger - https://springdoc.org/
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // Session(Redis)
    implementation 'org.springframework.session:spring-session-data-redis'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
}

tasks.named('test') {
    useJUnitPlatform()
}

clean {
    delete file('src/main/generated')
}

